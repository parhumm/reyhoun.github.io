//
// This includes all of the foundation global elements that are needed to work with any of the other files.
//
// Mixin & Functions
//

@function empty($value) {
    @if $value == '' {
        @return true;
    } @else {
        @return false;
    }
}

@function is-null($value) {
    @if ($value == null) or empty($value) {
        @return true;
    }
    @else {
        @return false;
    }
}



// This function check lightnes of background color to return elemnt color on this background
@function cc($bg, $amount) {
  @if(lightness($bg) > 50%) {
    @return darken($bg, $amount);
  } @else {
    @return lighten($bg, $amount);
  } 
}


//
// This function get two parameter and use Saturate & Lightnes of $main_color to create new color with hue of $custom_color!
//
@function use-hue-of-color($main_color, $custom_color) {
    @return hsl(hue($custom_color), saturation($main_color), lightness($main_color));
}
@function use-hue-of-number($main_color, $custom_hue) {
    @return hsl($custom_hue, saturation($main_color), lightness($main_color));
}


//
// This mixin return Hue, Saturate and Lightness of a color as form as css.
//
@mixin color-data($color) {
    hue: hue($color);
    saturation: saturation($color);
    lightness: lightness($color);
    // @debug 'hue: '          + hue($color);
    // @debug 'saturation: '   + saturation($color);
    // @debug 'lightness: '    + lightness($color);
}


// Usage: Nest Media Queries
// Example:
//    .nested-media-queries {
//        @include bp(small) {
//            width:50%;
//        }
//        @include bp(medium) {
//            width:25%;
//        }
//    }
//
@mixin breakpoint($point) {
    @if $point == small {
        @media #{$small-only} { @content; }
    }
    @else if $point == small-up {
        @media #{$small-up} { @content; }
    }
    @else if $point == medium {
        @media #{$medium-only} { @content; }
    }
    @else if $point == medium-up {
        @media #{$medium-up} { @content; }
    }
    @else if $point == medium-down {
        @media #{$medium-down} { @content; }
    }
    @else if $point == large {
        @media #{$large-only} { @content; }
    }
    @else if $point == large-up {
        @media #{$large-up} { @content; }
    }
    @else if $point == xlarge {
        @media #{$xlarge-only} { @content; }
    }
    @else if $point == xlarge-up {
        @media #{$xlarge-up} { @content; }
    }
    @else if $point == xxlarge {
        @media #{$xxlarge-only} { @content; }
    }
    @else if $point == xxlarge-up {
        @media #{$xxlarge-up} { @content; }
    }
}   

// a mixin for borwser support placeholder
@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }   
    &:-moz-placeholder {
        @content;
    }
}

@mixin transition($property:all, $speed:300ms, $ease:ease-out, $delay:0ms) {
    @if $experimental {
        -webkit-transition: $property $speed $ease $delay;
        -moz-transition: $property $speed $ease $delay;
    }
    transition: $property $speed $ease $delay;
}


// We use this to add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
@mixin single-transition-delay($property:all, $speed:300ms, $ease:ease-out, $delay:0ms) {
    @if $experimental {
        -webkit-transition: $property $speed $ease $delay;
        -moz-transition: $property $speed $ease $delay;
    }
    transition: $property $speed $ease $delay;
}


// Returns $value of selected $key
// -------------------------------------------------------------------------------
// @example
//      $list: (key_1, val_1), (key_2, val_2), (key_3, val_3);
//      list-key-value($list, key_2) => val_2
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $key [String] : $key of array
// -------------------------------------------------------------------------------

@function list-key-value($list, $key) {
    @each $item in $list {
        @if ($key == nth($item, 1)) {
            @return nth($item, 2);
        }
    }
}


// Convert anythings to bool
// -------------------------------------------------------------------------------
// @documentation https://github.com/HugoGiraudel/SassyCast
// -------------------------------------------------------------------------------
// @example to-bool(false);                 => false
// @example to-bool(0);                     => false
// @example to-bool(null);                  => false
// @example to-bool("");                    => false
// @example to-bool(true);                  => true
// @example to-bool(1);                     => true
// @example to-bool(());                    => true
// @example to-bool(string);                => true
// @example to-bool("quoted string");       => true
// @example to-bool(this is a list);        => true
// @example to-bool((this: is a map));      => true
// @example to-bool(1337);                  => true
// @example to-bool(#000);                  => true
// -------------------------------------------------------------------------------
// @param $value
// -------------------------------------------------------------------------------
// @return [Bool]

@function to-bool($value) {
    @if not $value or $value == "" or $value == 0 {
        @return false;
    }
    @return true;
}


// Returns $list as a string
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#debug
// -------------------------------------------------------------------------------
// @example debug(a b c d e)   => [ a, b, c, d, e ]
// @example debug(a b (c d e)) => [ a, b, [ c, d, e ] ]
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $pre [Boolean] : enable/disable variables type and proper indentation
// @param $level [Number] : internal variable for recursivity
// -------------------------------------------------------------------------------
// @return [String]
 
@function debug($list, $pre: false, $level: 1) {
    $tab: "    ";
    $indent: "";
    $break: if($pre, "\A ", "");
  
    @if length($list) == 0 {
        @return "( )";
    }
  
    @if length($list) == 1 {
        @return if($pre,  "(" + type-of($list) + ") ", "") + $list;
    }
 
    @for $i from 1 to $level {
        $indent: $indent + $tab;
    }
 
    $result: "[" + $break;
 
    @for $i from 1 through length($list) {
        $item: nth($list, $i);
        $result: $result + if($pre, $indent + $tab, " ");
 
        @if length($item) > 1 {
            $result: $result 
                + if($pre, "(list: " + length($item) + ") ", "") 
                + debug($item, $pre, $level + 1);
        }
 
        @else {
            @if $pre {
                $result: $result + "(" + type-of($item) + ") ";
            }
      
            @if length($item) == 0 {
                $result: $result + "( )";
            }
      
            @else if type-of($item) == string {
                $result: $result + quote($item);
            }
      
            @else if $item == null {
                $result: $result + "null";
            }
      
            @else {
                $result: $result + $item;
            }
        }
    
        @if $i != length($list) {
            $result: $result + "," + $break;
        }
    }
 
    $result: $result + $break + if($pre, if($level > 1, $indent, ""), " ") + "]";
 
    @return quote($result);
}
 
// Mixin displaying clean debug
// -------------------------------------------------------------------------------
// @param $list [List] : list
 
@mixin debug($list, $whitescreen: false) {
    body {
        &:before {
            content: debug($list, true)              !important;

            display: block                            !important;
            margin: 1em                               !important;
            padding: .5em                             !important; 

            background: #EFEFEF                       !important;
            border: 1px solid #DDD                    !important;
            border-radius: .2em                       !important;

            color: #333                               !important;
            font: .75em/1.5 "Courier New", monospace  !important;
            text-shadow: 0 1px white                  !important;
            white-space: pre-wrap                     !important;
        }
        &:after {
            display: block;
            content: debug($list);
        }
        @if ($whitescreen) {
            * {
                display: none;
            }
        }
    }
}

// placeholder for hideing the text
%text_hidden {
    text-indent: -9999px;
    overflow: hidden;
    display: block;
    line-height: 0;
    font-size: 0;
}